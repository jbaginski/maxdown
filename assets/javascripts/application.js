// Generated by CoffeeScript 1.7.1
(function() {
  var app, editor;

  $(document).ready(function() {
    app.init();
    return editor.init(".editor");
  });

  app = {
    init: function() {
      return this.bind_events();
    },
    bind_events: function() {
      $(document).on("click", ".btn-menu", function(e) {
        e.preventDefault();
        $(this).toggleClass("active");
        $(".main-nav").toggleClass("active");
        return $(".actions, .title").fadeToggle();
      });
      $(document).on("click", ".btn-theme", function(e) {
        e.preventDefault();
        $(this).toggleClass("maxdown-light maxdown-dark");
        return editor.toggle_theme();
      });
      $(document).on("click", ".btn-new-document", function(e) {
        e.preventDefault();
        return editor.new_document();
      });
      return $(document).on("click", ".document", function(e) {
        e.preventDefault();
        return editor.load_document($(this).data('docid'));
      });
    }
  };

  editor = {
    cm: '',
    default_title: 'UntitledDocument',
    default_value: '# New document\n\nStart writing your story here...',
    init: function(selector, t) {
      if (t == null) {
        t = 'maxdown-light';
      }
      this.bind_events();
      this.load_documents();
      return this.cm = CodeMirror($(selector)[0], {
        value: this.default_value,
        mode: {
          name: 'gfm',
          highlightFormatting: true
        },
        lineWrapping: true,
        tabSize: 2,
        theme: t
      });
    },
    bind_events: function() {
      $(document).on('click', '.btn-action', function(e) {
        var action;
        action = $(this).data('action');
        switch (action) {
          case 'new':
            return editor.new_document();
          case 'save':
            return editor.save_document();
        }
      });
      $(document).on('change', '.documents', function(e) {
        return editor.load_document($(this).val());
      });
      $(document).on('change', '.font-size', function(e) {
        return editor.set_font_size($(this).val());
      });
      return $(document).on('change', '.theme', function(e) {
        return editor.set_theme($(this).val());
      });
    },
    new_document: function() {
      this.cm.setValue(this.default_value);
      return this.cm.clearHistory();
    },
    load_document: function(id) {
      return this.cm.setValue(JSON.parse(localStorage.getItem(id)).content);
    },
    set_font_size: function(size) {
      return $('.CodeMirror').css("font-size", size + "px");
    },
    toggle_theme: function() {
      $("body").toggleClass("maxdown-light maxdown-dark");
      if (this.cm.getOption('theme') === 'maxdown-light') {
        return this.cm.setOption('theme', 'maxdown-dark');
      } else {
        if (this.cm.getOption('theme') === 'maxdown-dark') {
          return this.cm.setOption('theme', 'maxdown-light');
        }
      }
    },
    set_theme: function(theme) {
      this.cm.setOption('theme', theme);
      $('body, #editor').removeClass("maxdown-light");
      $('body, #editor').removeClass("maxdown-dark");
      return $('body, #editor').addClass(theme);
    },
    load_documents: function() {
      var doc, documents, i, keys, sortable;
      documents = [];
      keys = Object.keys(localStorage);
      i = 0;
      while (i < keys.length) {
        documents.push(JSON.parse(localStorage.getItem(keys[i])));
        i++;
      }
      sortable = [];
      for (doc in documents) {
        sortable.push([doc, documents[doc].updated_at]);
      }
      sortable.sort(function(a, b) {
        return a[1] - b[1];
      });
      $(".documents").html("");
      return $.each(documents, function(key, doc) {
        return $(".documents").append('<div class="document" data-docid="' + documents[key].id + '">' + documents[key].title + '.md</div>');
      });
    },
    save_document: function() {
      var doc, doc_id, docname;
      docname = this.default_title;
      doc_id = this.generate_uuid();
      doc = {
        id: doc_id,
        created_at: Date.now(),
        updated_at: Date.now(),
        title: docname,
        content: this.cm.getValue()
      };
      localStorage.setItem(doc_id, JSON.stringify(doc));
      alert('File successfully saved.');
      $('.actions .documents').append('<option value="' + doc.id + '">' + doc.title + '</option>');
      return $('.actions .documents').val(doc.id);
    },
    generate_uuid: function() {
      var chars, i, r, rnd, uuid;
      chars = '0123456789abcdef'.split('');
      uuid = [];
      rnd = Math.random;
      r = void 0;
      i = 0;
      uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';
      uuid[14] = '4';
      while (i < 36) {
        if (!uuid[i]) {
          r = 0 | rnd() * 16;
          uuid[i] = chars[i === 19 ? r & 0x3 | 0x8 : r & 0xf];
        }
        i++;
      }
      return uuid.join('');
    }
  };

}).call(this);
